#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;

my %opts;

##
# OPTIONS
# -p: prefix of modules to include
# -x: name of file containing modules to exclude
# -d: directory containing module files
# -o: name of output file
##
getopts('p:x:d:o:', \%opts);

my $prefix = $opts{'p'};
my $exclude_file = $opts{'x'};
my $dir = $opts{'d'};
my $output_file = $opts{'o'};

die "No directory given.\n" unless $dir;

my $output;
if ($output_file && $output_file ne '-') {
  open $output, '>', $output_file;
}
else {
  $output = \*STDOUT;
}

sub find_files ($) {
  my ($dir) = @_;
  opendir my ($dh), $dir;
  my @entries = readdir $dh;
  closedir $dh;
  @entries = map { "$dir/$_" } grep /^[^\.]/, @entries;
  my @files = grep { -f && /\.pm$/ } @entries;
  my @subdirs = grep { -d } @entries;
  return (@files, map { find_files($_) } @subdirs);
}

my @files = find_files $dir;

sub cat ($) {
  my ($file) = @_;
  open my $fh, '<', $file;
  local $/;
  my $text = <$fh>;
  close $fh;
  return $text;
}

my %exclude;
if ($exclude_file) {
  for my $line (grep /\S/, split /\n/, cat $exclude_file) {
    $exclude{$line} = 1;
  }
}

my %names;

my $count = 0;

sub fix_name ($) {
  my ($name) = @_;
  if (exists $names{$name}) {
    return $names{$name};
  }
  else {
    my $ret = sprintf 'n%d', $count;
    $count += 1;
    $names{$name} = $ret;
    return $ret;
  }
}

sub base ($) {
  my ($name) = @_;
  $name =~ s/::.*//;
  return $name;
}

sub trunc ($) {
  my ($name) = @_;
  my @parts = split '::', $name;
  return join('::', grep(/^[A-Z]/, @parts));
}

my %skip = qw/CORE 1 SUPER 1 UNIVERSAL 1/;

print $output "digraph Deps {\n";

my (%in_deg, %out_deg, %edges);

sub incr ($$) {
  my ($deg, $n) = @_;
  if (exists $deg->{$n}) {
    $deg->{$n} += 1;
  }
  else {
    $deg->{$n} = 1;
  }
}

for my $file (@files) {
  my $text = cat $file;
  $text =~ /^ \s* package \s+ ((\w+::)+\w+) \s* ;/mx;
  my $from = $1;
  next unless $from;
  $from = fix_name($from);
  while ($text =~ s/((\w+::)+\w+)//) {
    my $to = $1;
    $to = trunc($to);
    my $base = base $to;
    next if exists $skip{$base};
    next if $prefix && $prefix ne $base;
    next if exists $exclude{$to};
    $to = fix_name($to);
    next if $from eq $to;
    incr(\%in_deg, $to);
    incr(\%out_deg, $from);
    my $p = sprintf '%s%s -> %s;%s', "\t", $from, $to, "\n";
    unless (exists $edges{$p}) {
      $edges{$p} = 1;
      print $output $p;
    }
  }
}

for my $name (keys %names) {
  my $code = $names{$name};
  $name =~ s/^\w+::// if $prefix;
  $name =~ s/::/::\\n/g;
  my $fmt = '';
  unless ($out_deg{$code}) {
    $fmt = ',shape="box"';
  }
  printf $output '%s%s [label="%s"%s];%s', "\t", $code, $name, $fmt, "\n";
}

print $output "}\n";

